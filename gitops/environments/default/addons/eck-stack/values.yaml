---
# Default values for eck-stack.
# This is a YAML-formatted file.

# If enabled, will use the eck-elasticsearch chart and deploy an Elasticsearch resource.
#
eck-elasticsearch:
  enabled: true
  # Name of the Elasticsearch instance.
  #
  fullnameOverride: elasticsearch
  service:
    annotations: {}
    type: ClusterIP
    loadBalancerIP: ""
    ports:
      - name: beats
        port: 5044
        protocol: TCP
        targetPort: 5044
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
  ingress:
    enabled: true
    pathType: Prefix
    ingressClassName: "nginx-internal"
    ClassName: "nginx-internal"
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"    
    hosts:
    - host: elk.brmania.com.br
      path: "/"
    tls:
      enabled: true
      secretName: brmania-server-tls
      hosts:
        - elk.brmania.com.br  

  nodeSets:
  - name: default
    count: 3
    # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
    # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
    # and leave node.store.allow_mmap unset.
    # ref: https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-virtual-memory.html
    #
    config:
      node.store.allow_mmap: false
      # Enable anonymous access to allow GCLB health probes to succeed
      # xpack:
      #   security:
      #     enabled: true
      #     authc:
      #       anonymous:
      #         username: anon
      #         roles: monitoring_user
      #     http:
      #       ssl:
      #         enabled: true
      #         key: certs/tls.key
      #         certificate: certs/tls.crt
      #     transport:
      #       ssl:
      #         enabled: true
      #         key: certs/tls.key
      #         certificate: certs/tls.crt

    podTemplate:
      spec:
        secretMounts:
          - name: elasticsearch-certs
            secretName: elasticsearch-certs
            path: /usr/share/elasticsearch/config/certs
        initContainers:
        - name: sysctl
          image: busybox
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          securityContext:
            privileged: true
        volumeClaimTemplates:
            - metadata:
                name: elasticsearch-data
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 50Gi
                storageClassName: managed
        tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
        - key: "nodepool-type"
          operator: "Equal"
          value: "system"
          effect: "NoSchedule"
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: elasticsearch.k8s.elastic.co/statefulset-name
                    operator: In
                    values:
                    - elasticsearch-es-default
                topologyKey: kubernetes.io/hostname
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: nodepool-type
                  operator: In
                  values:
                  - system
                  - user
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                - key: nodepool-type
                  operator: In
                  values:
                  - system
            - weight: 1
              preference:
                matchExpressions:
                - key: "kubernetes.azure.com/scalesetpriority"
                  operator: In
                  values:
                  - "spot"
        topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: nodepool-type
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-es-default
        containers:
        - name: elasticsearch
          resources:
            limits:
              memory: 8Gi
              cpu: 2
      
    

# If enabled, will use the eck-kibana chart and deploy a Kibana resource.
#
eck-kibana:
  enabled: true

  fullnameOverride: kibana
  elasticsearchRef:
    name: elasticsearch

  config:
    server:
      ssl:
        enabled: true
      host: "0.0.0.0"
      publicBaseUrl: https://kibana.brmania.com.br
    # xpack:
    #   security:
    #     enabled: true
    #     http:
    #       ssl:
    #         enabled: true
    #         key: certs/tls.key
    #         certificate: certs/tls.crt
    #         verification_mode: certificate
    #     transport:
    #       ssl:
    #         enabled: true
    #         key: certs/tls.key
    #         certificate: certs/tls.crt
    #         verification_mode: certificate


  service:
    type: LoadBalancer
    # loadBalancerIP: ""
    # port: 5601
    # nodePort: ""
    # labels: {}
    # annotations:
    #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    # loadBalancerSourceRanges: []
    # # 0.0.0.0/0
    # httpPortName: https

  http:
    service:
      metadata:
        annotations:
          service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      

  ingress:
    enabled: true
    pathType: Prefix
    ingressClassName: "nginx-internal"
    ClassName: "nginx-internal"
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
          # Anotações para forçar HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      
      # Opcional: definir uma política de segurança mais rígida
      nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
      nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.2 TLSv1.3"
    hosts:
    - host: "kibana.brmania.com.br"
      path: "/"
      port: https
  
    tls:
      enabled: true
      secretName: brmania-server-tls
      hosts:
        - kibana.brmania.com.br
  podTemplate:
    spec:
      # secretMounts:
      #   - name: elasticsearch-certs
      #     secretName: elasticsearch-certs
      #     path: /usr/share/elasticsearch/config/certs
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 20
        successThreshold: 3
        timeoutSeconds: 5
      tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
      - key: "nodepool-type"
        operator: "Equal"
        value: "system"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: kibana.k8s.elastic.co/name
                  operator: In
                  values:
                  - kibana
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodepool-type
                operator: In
                values:
                - system
                - user
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: nodepool-type
                operator: In
                values:
                - system
          - weight: 1
            preference:
              matchExpressions:
              - key: "kubernetes.azure.com/scalesetpriority"
                operator: In
                values:
                - "spot"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: nodepool-type
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            kibana.k8s.elastic.co/name: kibana
      containers:
      - name: kibana
        env:
          - name: NODE_OPTIONS
            value: "--max-old-space-size=2048"
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2.5Gi
            cpu: 2
        readinessProbe:
          httpGet:
            path: /login
            port: 5601
            scheme: HTTPS



# If enabled, will use the eck-agent chart and deploy an Elastic Agent instance.
#
eck-agent:
  enabled: false

# If enabled, will use the eck-fleet-server chart and deploy a Fleet Server resource.
#
eck-fleet-server:
  enabled: false

# If enabled, will use the eck-beats chart and deploy a Beats resource.
#
eck-beats:
  enabled: false

# If enabled, will use the eck-logstash chart and deploy a Logstash resource.
#
eck-logstash:
  enabled: false

# If enabled, will use the eck-apm-server chart and deploy a standalone APM Server resource.
#
eck-apm-server:
  enabled: true
  elasticsearchRef:
    name: elasticsearch

# If enabled, will use the eck-enterprise-search chart and deploy a Enterprise Search resource.
#
eck-enterprise-search:
  enabled: false
